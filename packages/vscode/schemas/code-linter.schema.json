{
  "title": "JSON schema for CodeLinter configuration files",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "propertyNames": {
    "enum": [
      "files",
      "ignore",
      "plugins",
      "ruleSet",
      "rules",
      "overrides"
    ]
  },
  "definitions": {
    "ruleSeverity": {
      "oneOf": [
        {
          "description": "Alarm severity. \n\n0 - turns the rule off\n1 - turn the rule on as a warning (doesn't affect exit code)\n2 - turn the rule on as an error (exit code is 1 when triggered)\n3 - turn the rule on as an suggestion\n",
          "type": "integer",
          "minimum": 0,
          "maximum": 3
        },
        {
          "description": "Alarm severity. Set it to error, warn, suggestion, or off as appropriate.",
          "type": "string",
          "enum": [
            "off",
            "suggestion",
            "warn",
            "error"
          ]
        }
      ]
    },
    "rule": {
      "oneOf": [
        {
          "$ref": "#/definitions/ruleSeverity"
        },
        {
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/ruleSeverity"
            },
            {
              "oneOf": [
                {
                  "type": "object"
                },
                {
                  "type": "string"
                }
              ]
            }
          ],
          "minItems": 1,
          "additionalItems": true
        }
      ]
    },
    "all": {
      "properties": {
        "@typescript-eslint/adjacent-overload-signatures": {
          "$ref": "#/definitions/rule",
          "description": "Require that member overloads be consecutive"
        },
        "@typescript-eslint/array-type": {
          "$ref": "#/definitions/rule",
          "description": "Requires using either `T[]` or `Array<T>` for arrays"
        },
        "@typescript-eslint/await-thenable": {
          "$ref": "#/definitions/rule",
          "description": "Disallows awaiting a value that is not a Thenable"
        },
        "@typescript-eslint/ban-ts-comment": {
          "$ref": "#/definitions/rule",
          "description": "Bans `@ts-<directive>` comments from being used or requires descriptions after directive"
        },
        "@typescript-eslint/ban-tslint-comment": {
          "$ref": "#/definitions/rule",
          "description": "Bans `// tslint:<rule-flag>` comments from being used"
        },
        "@typescript-eslint/ban-types": {
          "$ref": "#/definitions/rule",
          "description": "Bans specific types from being used"
        },
        "@typescript-eslint/brace-style": {
          "$ref": "#/definitions/rule",
          "description": "Enforce consistent brace style for blocks"
        },
        "@typescript-eslint/class-literal-property-style": {
          "$ref": "#/definitions/rule",
          "description": "Ensures that literals on classes are exposed in a consistent style"
        },
        "@typescript-eslint/comma-dangle": {
          "$ref": "#/definitions/rule",
          "description": "Require or disallow trailing comma"
        },
        "@typescript-eslint/comma-spacing": {
          "$ref": "#/definitions/rule",
          "description": "Enforces consistent spacing before and after commas"
        },
        "@typescript-eslint/consistent-indexed-object-style": {
          "$ref": "#/definitions/rule",
          "description": "Enforce or disallow the use of the record type"
        },
        "@typescript-eslint/consistent-type-assertions": {
          "$ref": "#/definitions/rule",
          "description": "Enforces consistent usage of type assertions"
        },
        "@typescript-eslint/consistent-type-definitions": {
          "$ref": "#/definitions/rule",
          "description": "Consistent with type definition either `interface` or `type`"
        },
        "@typescript-eslint/consistent-type-imports": {
          "$ref": "#/definitions/rule",
          "description": "Enforces consistent usage of type imports"
        },
        "@typescript-eslint/default-param-last": {
          "$ref": "#/definitions/rule",
          "description": "Enforce default parameters to be last"
        },
        "@typescript-eslint/dot-notation": {
          "$ref": "#/definitions/rule",
          "description": "enforce dot notation whenever possible"
        },
        "@typescript-eslint/explicit-function-return-type": {
          "$ref": "#/definitions/rule",
          "description": "Require explicit return types on functions and class methods"
        },
        "@typescript-eslint/explicit-member-accessibility": {
          "$ref": "#/definitions/rule",
          "description": "Require explicit accessibility modifiers on class properties and methods"
        },
        "@typescript-eslint/explicit-module-boundary-types": {
          "$ref": "#/definitions/rule",
          "description": "Require explicit return and argument types on exported functions' and classes' public class methods"
        },
        "@typescript-eslint/func-call-spacing": {
          "$ref": "#/definitions/rule",
          "description": "Require or disallow spacing between function identifiers and their invocations"
        },
        "@typescript-eslint/init-declarations": {
          "$ref": "#/definitions/rule",
          "description": "require or disallow initialization in variable declarations"
        },
        "@typescript-eslint/keyword-spacing": {
          "$ref": "#/definitions/rule",
          "description": "Enforce consistent spacing before and after keywords"
        },
        "@typescript-eslint/lines-between-class-members": {
          "$ref": "#/definitions/rule",
          "description": "Require or disallow an empty line between class members"
        },
        "@typescript-eslint/member-delimiter-style": {
          "$ref": "#/definitions/rule",
          "description": "Require a specific member delimiter style for interfaces and type literals"
        },
        "@typescript-eslint/member-ordering": {
          "$ref": "#/definitions/rule",
          "description": "Require a consistent member declaration order"
        },
        "@typescript-eslint/method-signature-style": {
          "$ref": "#/definitions/rule",
          "description": "Enforces using a particular method signature syntax."
        },
        "@typescript-eslint/naming-convention": {
          "$ref": "#/definitions/rule",
          "description": "Enforces naming conventions for everything across a codebase"
        },
        "@typescript-eslint/no-array-constructor": {
          "$ref": "#/definitions/rule",
          "description": "Disallow generic `Array` constructors"
        },
        "@typescript-eslint/no-base-to-string": {
          "$ref": "#/definitions/rule",
          "description": "Requires that `.toString()` is only called on objects which provide useful information when stringified"
        },
        "@typescript-eslint/no-confusing-non-null-assertion": {
          "$ref": "#/definitions/rule",
          "description": "Disallow non-null assertion in locations that may be confusing"
        },
        "@typescript-eslint/no-confusing-void-expression": {
          "$ref": "#/definitions/rule",
          "description": "Requires expressions of type void to appear in statement position"
        },
        "@typescript-eslint/no-dupe-class-members": {
          "$ref": "#/definitions/rule",
          "description": "Disallow duplicate class members"
        },
        "@typescript-eslint/no-duplicate-imports": {
          "$ref": "#/definitions/rule",
          "description": "Disallow duplicate imports"
        },
        "@typescript-eslint/no-dynamic-delete": {
          "$ref": "#/definitions/rule",
          "description": "Disallow the delete operator with computed key expressions"
        },
        "@typescript-eslint/no-empty-function": {
          "$ref": "#/definitions/rule",
          "description": "Disallow empty functions"
        },
        "@typescript-eslint/no-empty-interface": {
          "$ref": "#/definitions/rule",
          "description": "Disallow the declaration of empty interfaces"
        },
        "@typescript-eslint/no-explicit-any": {
          "$ref": "#/definitions/rule",
          "description": "Disallow usage of the `any` type"
        },
        "@typescript-eslint/no-extra-non-null-assertion": {
          "$ref": "#/definitions/rule",
          "description": "Disallow extra non-null assertion"
        },
        "@typescript-eslint/no-extra-parens": {
          "$ref": "#/definitions/rule",
          "description": "Disallow unnecessary parentheses"
        },
        "@typescript-eslint/no-extra-semi": {
          "$ref": "#/definitions/rule",
          "description": "Disallow unnecessary semicolons"
        },
        "@typescript-eslint/no-extraneous-class": {
          "$ref": "#/definitions/rule",
          "description": "Forbids the use of classes as namespaces"
        },
        "@typescript-eslint/no-floating-promises": {
          "$ref": "#/definitions/rule",
          "description": "Requires Promise-like values to be handled appropriately"
        },
        "@typescript-eslint/no-for-in-array": {
          "$ref": "#/definitions/rule",
          "description": "Disallow iterating over an array with a for-in loop"
        },
        "@typescript-eslint/no-implicit-any-catch": {
          "$ref": "#/definitions/rule",
          "description": "Disallow usage of the implicit `any` type in catch clauses"
        },
        "@typescript-eslint/no-implied-eval": {
          "$ref": "#/definitions/rule",
          "description": "Disallow the use of `eval()`-like methods"
        },
        "@typescript-eslint/no-inferrable-types": {
          "$ref": "#/definitions/rule",
          "description": "Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean"
        },
        "@typescript-eslint/no-invalid-this": {
          "$ref": "#/definitions/rule",
          "description": "Disallow `this` keywords outside of classes or class-like objects"
        },
        "@typescript-eslint/no-invalid-void-type": {
          "$ref": "#/definitions/rule",
          "description": "Disallows usage of `void` type outside of generic or return types"
        },
        "@typescript-eslint/no-loop-func": {
          "$ref": "#/definitions/rule",
          "description": "Disallow function declarations that contain unsafe references inside loop statements"
        },
        "@typescript-eslint/no-loss-of-precision": {
          "$ref": "#/definitions/rule",
          "description": "Disallow literal numbers that lose precision"
        },
        "@typescript-eslint/no-magic-numbers": {
          "$ref": "#/definitions/rule",
          "description": "Disallow magic numbers"
        },
        "@typescript-eslint/no-misused-new": {
          "$ref": "#/definitions/rule",
          "description": "Enforce valid definition of `new` and `constructor`"
        },
        "@typescript-eslint/no-misused-promises": {
          "$ref": "#/definitions/rule",
          "description": "Avoid using promises in places not designed to handle them"
        },
        "@typescript-eslint/no-namespace": {
          "$ref": "#/definitions/rule",
          "description": "Disallow the use of custom TypeScript modules and namespaces"
        },
        "@typescript-eslint/no-non-null-asserted-optional-chain": {
          "$ref": "#/definitions/rule",
          "description": "Disallows using a non-null assertion after an optional chain expression"
        },
        "@typescript-eslint/no-non-null-assertion": {
          "$ref": "#/definitions/rule",
          "description": "Disallows non-null assertions using the `!` postfix operator"
        },
        "@typescript-eslint/no-parameter-properties": {
          "$ref": "#/definitions/rule",
          "description": "Disallow the use of parameter properties in class constructors"
        },
        "@typescript-eslint/no-redeclare": {
          "$ref": "#/definitions/rule",
          "description": "Disallow variable redeclaration"
        },
        "@typescript-eslint/no-require-imports": {
          "$ref": "#/definitions/rule",
          "description": "Disallows invocation of `require()`"
        },
        "@typescript-eslint/no-restricted-syntax": {
          "$ref": "#/definitions/rule",
          "description": "Disallow specified syntax"
        },
        "@typescript-eslint/no-shadow": {
          "$ref": "#/definitions/rule",
          "description": "Disallow variable declarations from shadowing variables declared in the outer scope"
        },
        "@typescript-eslint/no-this-alias": {
          "$ref": "#/definitions/rule",
          "description": "Disallow aliasing `this`"
        },
        "@typescript-eslint/no-throw-literal": {
          "$ref": "#/definitions/rule",
          "description": "Disallow throwing literals as exceptions"
        },
        "@typescript-eslint/no-type-alias": {
          "$ref": "#/definitions/rule",
          "description": "Disallow the use of type aliases"
        },
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": {
          "$ref": "#/definitions/rule",
          "description": "Flags unnecessary equality comparisons against boolean literals"
        },
        "@typescript-eslint/no-unnecessary-condition": {
          "$ref": "#/definitions/rule",
          "description": "Prevents conditionals where the type is always truthy or always falsy"
        },
        "@typescript-eslint/no-unnecessary-qualifier": {
          "$ref": "#/definitions/rule",
          "description": "Warns when a namespace qualifier is unnecessary"
        },
        "@typescript-eslint/no-unnecessary-type-arguments": {
          "$ref": "#/definitions/rule",
          "description": "Enforces that type arguments will not be used if not required"
        },
        "@typescript-eslint/no-unnecessary-type-assertion": {
          "$ref": "#/definitions/rule",
          "description": "Warns if a type assertion does not change the type of an expression"
        },
        "@typescript-eslint/no-unnecessary-type-constraint": {
          "$ref": "#/definitions/rule",
          "description": "Disallows unnecessary constraints on generic types"
        },
        "@typescript-eslint/no-unsafe-argument": {
          "$ref": "#/definitions/rule",
          "description": "Disallow calling a function with a value with type `any`"
        },
        "@typescript-eslint/no-unsafe-assignment": {
          "$ref": "#/definitions/rule",
          "description": "Disallows assigning any to variables and properties"
        },
        "@typescript-eslint/no-unsafe-call": {
          "$ref": "#/definitions/rule",
          "description": "Disallows calling an any type value"
        },
        "@typescript-eslint/no-unsafe-member-access": {
          "$ref": "#/definitions/rule",
          "description": "Disallows member access on any typed variables"
        },
        "@typescript-eslint/no-unsafe-return": {
          "$ref": "#/definitions/rule",
          "description": "Disallows returning any from a function"
        },
        "@typescript-eslint/no-unused-expressions": {
          "$ref": "#/definitions/rule",
          "description": "Disallow unused expressions"
        },
        "@typescript-eslint/no-unused-vars": {
          "$ref": "#/definitions/rule",
          "description": "Disallow unused variables"
        },
        "@typescript-eslint/no-use-before-define": {
          "$ref": "#/definitions/rule",
          "description": "Disallow the use of variables before they are defined"
        },
        "@typescript-eslint/no-useless-constructor": {
          "$ref": "#/definitions/rule",
          "description": "Disallow unnecessary constructors"
        },
        "@typescript-eslint/prefer-as-const": {
          "$ref": "#/definitions/rule",
          "description": "Prefer usage of `as const` over literal type"
        },
        "@typescript-eslint/prefer-enum-initializers": {
          "$ref": "#/definitions/rule",
          "description": "Prefer initializing each enums member value"
        },
        "@typescript-eslint/prefer-for-of": {
          "$ref": "#/definitions/rule",
          "description": "Prefer a ‘for-of’ loop over a standard ‘for’ loop if the index is only used to access the array being iterated"
        },
        "@typescript-eslint/prefer-function-type": {
          "$ref": "#/definitions/rule",
          "description": "Use function types instead of interfaces with call signatures"
        },
        "@typescript-eslint/prefer-includes": {
          "$ref": "#/definitions/rule",
          "description": "Enforce `includes` method over `indexOf` method"
        },
        "@typescript-eslint/prefer-literal-enum-member": {
          "$ref": "#/definitions/rule",
          "description": "Require that all enum members be literal values to prevent unintended enum member name shadow issues"
        },
        "@typescript-eslint/prefer-namespace-keyword": {
          "$ref": "#/definitions/rule",
          "description": "Require the use of the `namespace` keyword instead of the `module` keyword to declare custom TypeScript modules"
        },
        "@typescript-eslint/prefer-nullish-coalescing": {
          "$ref": "#/definitions/rule",
          "description": "Enforce the usage of the nullish coalescing operator instead of logical chaining"
        },
        "@typescript-eslint/prefer-optional-chain": {
          "$ref": "#/definitions/rule",
          "description": "Prefer using concise optional chain expressions instead of chained logical ands"
        },
        "@typescript-eslint/prefer-readonly": {
          "$ref": "#/definitions/rule",
          "description": "Requires that private members are marked as `readonly` if they're never modified outside of the constructor"
        },
        "@typescript-eslint/prefer-readonly-parameter-types": {
          "$ref": "#/definitions/rule",
          "description": "Requires that function parameters are typed as readonly to prevent accidental mutation of inputs"
        },
        "@typescript-eslint/prefer-reduce-type-parameter": {
          "$ref": "#/definitions/rule",
          "description": "Prefer using type parameter when calling `Array#reduce` instead of casting"
        },
        "@typescript-eslint/prefer-regexp-exec": {
          "$ref": "#/definitions/rule",
          "description": "Enforce that `RegExp#exec` is used instead of `String#match` if no global flag is provided"
        },
        "@typescript-eslint/prefer-string-starts-ends-with": {
          "$ref": "#/definitions/rule",
          "description": "Enforce the use of `String#startsWith` and `String#endsWith` instead of other equivalent methods of checking substrings"
        },
        "@typescript-eslint/prefer-ts-expect-error": {
          "$ref": "#/definitions/rule",
          "description": "Recommends using `@ts-expect-error` over `@ts-ignore`"
        },
        "@typescript-eslint/promise-function-async": {
          "$ref": "#/definitions/rule",
          "description": "Requires any function or method that returns a Promise to be marked async"
        },
        "@typescript-eslint/quotes": {
          "$ref": "#/definitions/rule",
          "description": "Enforce the consistent use of either backticks, double, or single quotes"
        },
        "@typescript-eslint/require-array-sort-compare": {
          "$ref": "#/definitions/rule",
          "description": "Requires `Array#sort` calls to always provide a `compareFunction`"
        },
        "@typescript-eslint/require-await": {
          "$ref": "#/definitions/rule",
          "description": "Disallow async functions which have no `await` expression"
        },
        "@typescript-eslint/restrict-plus-operands": {
          "$ref": "#/definitions/rule",
          "description": "When adding two variables, operands must both be of type number or of type string"
        },
        "@typescript-eslint/restrict-template-expressions": {
          "$ref": "#/definitions/rule",
          "description": "Enforce template literal expressions to be of string type"
        },
        "@typescript-eslint/return-await": {
          "$ref": "#/definitions/rule",
          "description": "Enforces consistent returning of awaited values"
        },
        "@typescript-eslint/semi": {
          "$ref": "#/definitions/rule",
          "description": "Require or disallow semicolons instead of ASI"
        },
        "@typescript-eslint/space-before-function-paren": {
          "$ref": "#/definitions/rule",
          "description": "Enforces consistent spacing before function parenthesis"
        },
        "@typescript-eslint/space-infix-ops": {
          "$ref": "#/definitions/rule",
          "description": "This rule is aimed at ensuring there are spaces around infix operators."
        },
        "@typescript-eslint/strict-boolean-expressions": {
          "$ref": "#/definitions/rule",
          "description": "Restricts the types allowed in boolean expressions"
        },
        "@typescript-eslint/switch-exhaustiveness-check": {
          "$ref": "#/definitions/rule",
          "description": "Exhaustiveness checking in switch with union type"
        },
        "@typescript-eslint/triple-slash-reference": {
          "$ref": "#/definitions/rule",
          "description": "Sets preference level for triple slash directives versus ES6-style import declarations"
        },
        "@typescript-eslint/type-annotation-spacing": {
          "$ref": "#/definitions/rule",
          "description": "Require consistent spacing around type annotations"
        },
        "@typescript-eslint/typedef": {
          "$ref": "#/definitions/rule",
          "description": "Requires type annotations to exist"
        },
        "@typescript-eslint/unbound-method": {
          "$ref": "#/definitions/rule",
          "description": "Enforces unbound methods are called with their expected scope"
        },
        "@typescript-eslint/unified-signatures": {
          "$ref": "#/definitions/rule",
          "description": "Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter"
        },
        "@cross-device-app-dev/color-value": {
          "$ref": "#/definitions/rule",
          "description": "This rule validates the value of the color"
        },
        "@cross-device-app-dev/font-size-unit": {
          "$ref": "#/definitions/rule",
          "description": "This rule validates the font size unit"
        },
        "@cross-device-app-dev/font-size": {
          "$ref": "#/definitions/rule",
          "description": "This rule validates the font size"
        },
        "@cross-device-app-dev/grid-columns-span": {
          "$ref": "#/definitions/rule",
          "description": "This rule validates the grid layout"
        },
        "@cross-device-app-dev/grid-span-value": {
          "$ref": "#/definitions/rule",
          "description": "This rule validates the grid layout"
        },
        "@cross-device-app-dev/size-unit": {
          "$ref": "#/definitions/rule",
          "description": "This rule validates the unit of the layout dimension"
        },
        "@cross-device-app-dev/color-contrast": {
          "$ref": "#/definitions/rule",
          "description": "This rule validates the color contrast."
        },
        "@cross-device-app-dev/touch-target-size": {
          "$ref": "#/definitions/rule",
          "description": "This rule validates the value of responseRegion"
        },
        "@cross-device-app-dev/sidebar-navigation": {
          "$ref": "#/definitions/rule",
          "description": "This rule validates the navigation bar settings for PCs and tablets."
        },
        "@hw-stylistic/array-bracket-spacing": {
          "$ref": "#/definitions/rule",
          "description": "Enforce consistent spacing before and after commas"
        },
        "@hw-stylistic/brace-style": {
          "$ref": "#/definitions/rule",
          "description": "Enforce consistent brace style for blocks"
        },
        "@hw-stylistic/comma-spacing": {
          "$ref": "#/definitions/rule",
          "description": "Enforce consistent spacing before and after commas"
        },
        "@hw-stylistic/curly": {
          "$ref": "#/definitions/rule",
          "description": "Enforce consistent brace style for all control statements"
        },
        "@hw-stylistic/indent": {
          "$ref": "#/definitions/rule",
          "description": "Enforce indention of case and default in switch"
        },
        "@hw-stylistic/keyword-spacing": {
          "$ref": "#/definitions/rule",
          "description": "Enforce consistent spacing before and after keywords"
        },
        "@hw-stylistic/max-len": {
          "$ref": "#/definitions/rule",
          "description": "Enforce a maximum line length"
        },
        "@hw-stylistic/no-multi-spaces": {
          "$ref": "#/definitions/rule",
          "description": "Disallow multiple spaces"
        },
        "@hw-stylistic/no-tabs": {
          "$ref": "#/definitions/rule",
          "description": "Disallow all tabs"
        },
        "@hw-stylistic/object-property-newline": {
          "$ref": "#/definitions/rule",
          "description": "Enforce placing object properties on separate lines"
        },
        "@hw-stylistic/one-var-declaration-per-line": {
          "$ref": "#/definitions/rule",
          "description": "The variable declaration should declare only one variable"
        },
        "@hw-stylistic/operator-linebreak": {
          "$ref": "#/definitions/rule",
          "description": "Enforce consistent line break style for operators"
        },
        "@hw-stylistic/quotes": {
          "$ref": "#/definitions/rule",
          "description": "Enforce the consistent use of single quotes"
        },
        "@hw-stylistic/semi-spacing": {
          "$ref": "#/definitions/rule",
          "description": "Enforce consistent spacing before semicolons"
        },
        "@hw-stylistic/space-before-blocks": {
          "$ref": "#/definitions/rule",
          "description": "Enforce consistent spacing before blocks"
        },
        "@hw-stylistic/space-before-function-paren": {
          "$ref": "#/definitions/rule",
          "description": "Enforce consistent spacing before `function` definition opening parenthesis"
        },
        "@hw-stylistic/space-infix-ops": {
          "$ref": "#/definitions/rule",
          "description": "Require spacing around infix operators"
        },
        "@hw-stylistic/file-naming-convention": {
          "$ref": "#/definitions/rule",
          "description": "Enforce file naming conventions"
        },
        "@previewer/mandatory-default-value-for-local-initialization": {
          "$ref": "#/definitions/rule",
          "description": "A default value is required for a component attribute that can be initialized locally."
        },
        "@previewer/no-page-method-on-preview-component": {
          "$ref": "#/definitions/rule",
          "description": "Page methods cannot be called for @Preview decorated components."
        },
        "@previewer/no-unallowed-decorator-on-root-component": {
          "$ref": "#/definitions/rule",
          "description": "@Entry decorated components and @Preview decorated root components should not contain decorators forbidding local initialization."
        },
        "@performance/no-high-loaded-frame-rate-range": {
          "$ref": "#/definitions/rule",
          "description": "Disallow fixed high frame rates"
        },
        "@security/no-unsafe-aes": {
          "$ref": "#/definitions/rule",
          "description": "This rule forbids unsafe aes algorithm"
        },
        "@security/no-unsafe-dh": {
          "$ref": "#/definitions/rule",
          "description": "This rule forbids unsafe dh algorithm"
        },
        "@security/no-unsafe-dsa": {
          "$ref": "#/definitions/rule",
          "description": "This rule forbids unsafe dsa algorithm"
        },
        "@security/no-unsafe-ecdsa": {
          "$ref": "#/definitions/rule",
          "description": "This rule forbids unsafe ecdsa algorithm"
        },
        "@security/no-unsafe-hash": {
          "$ref": "#/definitions/rule",
          "description": "This rule forbids unsafe hash algorithm"
        },
        "@security/no-unsafe-mac": {
          "$ref": "#/definitions/rule",
          "description": "This rule forbids unsafe mac algorithm"
        },
        "@security/no-unsafe-rsa-encrypt": {
          "$ref": "#/definitions/rule",
          "description": "This rule forbids unsafe rsa encrypt algorithm"
        },
        "@security/no-unsafe-rsa-sign": {
          "$ref": "#/definitions/rule",
          "description": "This rule forbids unsafe rsa sign algorithm"
        },
        "@security/no-unsafe-dh-key": {
          "$ref": "#/definitions/rule",
          "description": "This rule forbids unsafe dh key algorithm."
        },
        "@security/no-unsafe-dsa-key": {
          "$ref": "#/definitions/rule",
          "description": "This rule forbids unsafe dsa key algorithm."
        },
        "@security/no-unsafe-rsa-key": {
          "$ref": "#/definitions/rule",
          "description": "This rule forbids unsafe rsa key algorithm."
        },
        "@security/no-cycle": {
          "$ref": "#/definitions/rule",
          "description": "This rule ensures that there is no resolvable path back to this module via its dependencies."
        },
        "@performance/hp-arkui-image-async-load": {
          "$ref": "#/definitions/rule",
          "description": "Asynchronously load large images"
        },
        "@performance/hp-arkui-load-on-demand": {
          "$ref": "#/definitions/rule",
          "description": "Use LazyForEach when appropriate"
        },
        "@performance/hp-arkui-remove-container-without-property": {
          "$ref": "#/definitions/rule",
          "description": "Reduce redundant nested container"
        },
        "@performance/hp-performance-no-dynamic-cls-func": {
          "$ref": "#/definitions/rule",
          "description": "Avoid dynamically declaring functions and classes"
        },
        "@performance/hp-performance-no-closures": {
          "$ref": "#/definitions/rule",
          "description": "Pass in parameters for internal variables of functions"
        },
        "@performance/number-init-check": {
          "$ref": "#/definitions/rule",
          "description": "The value assigned to a variable should be of the type declared for the variable"
        },
        "@performance/sparse-array-check": {
          "$ref": "#/definitions/rule",
          "description": "Avoid using sparse arrays"
        },
        "@performance/typed-array-check": {
          "$ref": "#/definitions/rule",
          "description": "TypedArray data structure is recommended"
        },
        "@security/no-commented-code": {
          "$ref": "#/definitions/rule",
          "description": "Delete the related code completely when it is invalid"
        },
        "@security/specified-interface-call-chain-check": {
          "$ref": "#/definitions/rule",
          "description": "Identify the call chain for specified interface"
        },
        "@performance/hp-arkui-no-state-var-access-in-loop": {
          "$ref": "#/definitions/rule",
          "description": "Avoid frequent state variable reads inside loop logic"
        },
        "@performance/hp-arkui-use-row-column-to-replace-flex": {
          "$ref": "#/definitions/rule",
          "description": "Replace Flex with Column/Row"
        },
        "@performance/hp-arkui-use-local-var-to-replace-state-var": {
          "$ref": "#/definitions/rule",
          "description": "Replace state variables with local variables for temporary calculation"
        },
        "@performance/hp-arkui-avoid-empty-callback": {
          "$ref": "#/definitions/rule",
          "description": "Avoid setting empty system callback listeners"
        },
        "@performance/high-frequency-log-check": {
          "$ref": "#/definitions/rule",
          "description": "Avoid printing logs in frequent functions"
        },
        "@performance/waterflow-data-preload-check": {
          "$ref": "#/definitions/rule",
          "description": "Preload data in the WaterFlow component for better scrolling experience"
        },
        "@performance/hp-arkui-combine-same-arg-animateto": {
          "$ref": "#/definitions/rule",
          "description": "Combine animateTo calls that share the same parameters"
        },
        "@performance/hp-arkui-no-func-as-arg-for-reusable-component": {
          "$ref": "#/definitions/rule",
          "description": "Do not use functions as input parameters for creating reusable components"
        },
        "@performance/hp-arkui-set-cache-count-for-lazyforeach-grid": {
          "$ref": "#/definitions/rule",
          "description": "Set cachedCount to an appropriate value when using LazyForEach in grids"
        },
        "@performance/hp-arkui-use-object-link-to-replace-prop": {
          "$ref": "#/definitions/rule",
          "description": "Use @ObjectLink instead of @Prop to reduce unnecessary deep copies"
        },
        "@performance/hp-arkui-use-reusable-component": {
          "$ref": "#/definitions/rule",
          "description": "Use reusable components to define complex components whenever possible"
        },
        "@performance/hp-arkui-use-scale-to-replace-attr-animateto": {
          "$ref": "#/definitions/rule",
          "description": "Use the scale animation to replace animateTo when the component layout is changed"
        },
        "@performance/hp-arkui-use-word-break-to-replace-zero-width-space": {
          "$ref": "#/definitions/rule",
          "description": "Use word-break to replace zero-width spaces (\\u200b)"
        },
        "@performance/hp-arkui-remove-redundant-nest-container": {
          "$ref": "#/definitions/rule",
          "description": "Avoid redundant nesting"
        },
        "@performance/hp-arkui-use-onAnimationStart-for-swiper-preload": {
          "$ref": "#/definitions/rule",
          "description": "Use the swiper preloading mechanism with the OnAnimationStart callback"
        },
        "@performance/hp-arkui-suggest-reuseid-for-if-else-reusable-component": {
          "$ref": "#/definitions/rule",
          "description": "Use reuseId to mark the components of different structures"
        },
        "@performance/hp-arkui-replace-nested-reusable-component-by-builder": {
          "$ref": "#/definitions/rule",
          "description": "Prioritize @Builder over nested custom components"
        },
        "@performance/hp-arkui-avoid-update-auto-state-var-in-aboutToReuse": {
          "$ref": "#/definitions/rule",
          "description": "Avoid updating state variables in aboutToReuse with automatically updated values"
        },
        "@performance/hp-arkui-use-grid-layout-options": {
          "$ref": "#/definitions/rule",
          "description": "Use GridLayoutOptions when specifying the position in grids"
        },
        "@performance/start-window-icon-check": {
          "$ref": "#/definitions/rule",
          "description": "Keep the startup icon size within 256 x 256 pixels"
        },
        "@performance/hp-arkui-no-stringify-in-lazyforeach-key-generator": {
          "$ref": "#/definitions/rule",
          "description": "Do not use stringify in the key generator function of LazyForEach"
        },
        "@performance/hp-arkui-use-attributeUpdater-control-refresh-scope": {
          "$ref": "#/definitions/rule",
          "description": "Use attributeUpdater to precisely control the update scope of component attributes"
        },
        "@performance/hp-arkui-use-id-in-get-resource-sync-api": {
          "$ref": "#/definitions/rule",
          "description": "Use .id when using getColorSync and getStringSync"
        },
        "@performance/hp-arkui-use-transition-to-replace-animateto": {
          "$ref": "#/definitions/rule",
          "description": "Use transition for component transition animation"
        },
        "@performance/hp-arkui-remove-redundant-state-var": {
          "$ref": "#/definitions/rule",
          "description": "Remove state variables that are not associated with a UI component"
        },
        "@performance/hp-arkui-use-taskpool-for-web-request": {
          "$ref": "#/definitions/rule",
          "description": "Use taskpool for asynchronous processing of network resource requests and responses"
        },
        "@performance/hp-arkui-remove-unchanged-state-var": {
          "$ref": "#/definitions/rule",
          "description": "Remove unchanged state variables"
        },
        "@performance/hp-arkts-no-use-any-export-current": {
          "$ref": "#/definitions/rule",
          "description": "Do not use export * to export types and data defined in the current module"
        },
        "@performance/hp-arkts-no-use-any-export-other": {
          "$ref": "#/definitions/rule",
          "description": "Do not use export * to export types and data defined in the other module"
        },
        "@performance/hp-arkui-suggest-cache-avplayer": {
          "$ref": "#/definitions/rule",
          "description": "Suggestion: Cache AVPlayer instances to shorten the playback start delay"
        },
        "@performance/hp-arkui-suggest-use-effectkit-blur": {
          "$ref": "#/definitions/rule",
          "description": "Use effectKit.createEffect to create a blur effect"
        },
        "@performance/timezone-interface-check": {
          "$ref": "#/definitions/rule",
          "description": "Suggestion: Set timezone correctly"
        },
        "@performance/lottie-animation-destroy-check": {
          "$ref": "#/definitions/rule",
          "description": "Suggestion: Do not forget to destroy lottie animation"
        },
        "@performance/hp-arkui-reduce-pangesture-distance": {
          "$ref": "#/definitions/rule",
          "description": "Reduce the pan gesture recognition distance"
        },
        "@performance/hp-arkui-suggest-use-get-anonymousid-async": {
          "$ref": "#/definitions/rule",
          "description": "Asynchronously obtain the anonymous ID for IFAA passwordless authentication on the main thread"
        },
        "@performance/constant-property-referencing-check-in-loops": {
          "$ref": "#/definitions/rule",
          "description": "Extract constant property accesses within the loop to reduce the number of property access times"
        },
        "@performance/foreach-args-check": {
          "$ref": "#/definitions/rule",
          "description": "Set keyGenerator of ForEach to deliver better performance."
        },
        "@performance/multiple-associations-state-var-check": {
          "$ref": "#/definitions/rule",
          "description": "Use conditional update when multiple components are associated with the same data source"
        },
        "eqeqeq": {
          "$ref": "#/definitions/rule",
          "description": "Require the use of '===' and '!=='"
        },
        "prefer-const": {
          "$ref": "#/definitions/rule",
          "description": "Require 'const' declarations for variables that are never reassigned after declared"
        }
      }
    }
  },
  "properties": {
    "files": {
      "description": "An array of glob patterns indicating a set of files to which the configuration applies. If this field is not specified, the default settings will apply.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ignore": {
      "description": "An array of glob patterns indicating a set of files to which the configuration should not apply. If this field is not specified, the configuration applies to all matches of files.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "plugins": {
      "description": "Reserved field, which is used to load custom rule sets.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ruleSet": {
      "description": "Rule set to be applied. Only the built-in rule sets, all and recommended, are supported. You can check the rules contained in the rule sets by consulting the HarmonyOS official website.",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "plugin:@typescript-eslint/recommended",
          "plugin:@typescript-eslint/all",
          "plugin:@cross-device-app-dev/recommended",
          "plugin:@cross-device-app-dev/all",
          "plugin:@hw-stylistic/recommended",
          "plugin:@hw-stylistic/all",
          "plugin:@previewer/recommended",
          "plugin:@previewer/all",
          "plugin:@performance/recommended",
          "plugin:@performance/all",
          "plugin:@security/recommended",
          "plugin:@security/all"
        ]
      }
    },
    "rules": {
      "description": "Rules different from those in the specified rule set. You can edit or disable existing rules in the rule set or add new rules. ruleSet and rules jointly determine the rules to be used for code check.",
      "type": "object",
      "$ref": "#/definitions/all"
    },
    "overrides": {
      "type": "array",
      "description": "Provides custom configuration that only applies to files and folders that match specific glob patterns.",
      "items": {
        "type": "object",
        "propertyNames": {
          "enum": [
            "files",
            "excluded",
            "rules"
          ]
        },
        "properties": {
          "files": {
            "description": "An array of glob patterns indicating files and folders to which the overrides configuration applies, relative to the directory of the configuration file.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "contains": {
              "type": "string"
            }
          },
          "excluded": {
            "description": "An array of glob patterns indicating files and folders to be excluded. The excluded files and folders will not be checked.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rules": {
            "description": "Custom rules different from those in the common configuration. You can edit or disable existing rules in the common configuration or add new rules. The custom rules have higher precedence than the common configuration.",
            "$ref": "#/properties/rules"
          }
        },
        "required": [
          "files"
        ]
      }
    }
  }
}
